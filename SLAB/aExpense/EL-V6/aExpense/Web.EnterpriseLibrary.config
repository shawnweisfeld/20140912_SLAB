<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="validation" type="Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings, Microsoft.Practices.EnterpriseLibrary.Validation, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="policyInjection" type="Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings, Microsoft.Practices.EnterpriseLibrary.PolicyInjection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="RetryPolicyConfiguration" type="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Configuration.RetryPolicyConfigurationSettings, Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Configuration, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
  </configSections>

  <validation>
    <type name="AExpense.Model.Expense" assemblyName="AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">
      <ruleset name="ExpenseRuleset">
        <properties>
          <property name="Details">
            <validator type="AExpense.Validation.DuplicateExpenseDetailsValidator, AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DuplicateItemsValidator" />
          </property>
        </properties>        
      </ruleset>
    </type>
  </validation>
  
  <policyInjection>
    <policies>
      <add name="ExpenseTracingPolicy">
        <matchingRules>
          <add name="TagRule" match="SaveExpensePolicyRule" ignoreCase="false" type="Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule, Microsoft.Practices.EnterpriseLibrary.PolicyInjection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
        </matchingRules>
        <handlers>
          <add type="AExpense.Instrumentation.SemanticLogCallHandler, AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SemanticLogging Call Handler" />
        </handlers>
      </add>
    </policies>
  </policyInjection>
  
  <exceptionHandling>
    <exceptionPolicies>
      <add name="Notify Policy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="SemanticLogging Exception Handler" type="AExpense.Instrumentation.SemanticLoggingExceptionHandler, AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
              <add name="Replace Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                exceptionMessage="" exceptionMessageResourceName="OperationAborted"
                exceptionMessageResourceType="AExpense.Properties.Resources, AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                replaceExceptionType="AExpense.NotifyException, AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="Global Policy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="None">
            <exceptionHandlers>              
              <add name="SemanticLogging Exception Handler" type="AExpense.Instrumentation.SemanticLoggingExceptionHandler, AExpense, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>

  <dataConfiguration defaultDatabase="aExpense" />
  <connectionStrings configSource="Web.Connections.config" />

  <RetryPolicyConfiguration defaultRetryStrategy="ExponentialIntervalDefault">
    <exponentialBackoff name="ExponentialIntervalDefault" maxRetryCount="5" minBackoff="00:00:01" maxBackoff="00:01:00" deltaBackoff="00:00:05" />
  </RetryPolicyConfiguration>

</configuration>
